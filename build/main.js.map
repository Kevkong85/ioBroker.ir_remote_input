{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport { ReaderManger } from './reader.manager';\nimport { StateStoreService } from './stateStore.service';\n\nclass IrRemoteInput extends utils.Adapter {\n\n    // private _reader: EvdevReader;\n    private _stateStore: StateStoreService;\n    private _readerManager: ReaderManger;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ir_remote_input',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        // this._reader = new EvdevReader({ raw: false });\n        this._stateStore = new StateStoreService(this);\n        this._readerManager = new ReaderManger(this, this._stateStore);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        this.log.info('Device path configured: ' + this.config.devicePath);\n        await this._stateStore.init();\n        this._readerManager.init(this.config.devicePath);\n\n        // this._reader.on('EV_KEY', data => {\n        //     this.log.info('data: ' + JSON.stringify(data));\n        //     this.log.info('key : ' + data.code + ' - ' + data.value);\n        // });\n        // this._reader.on('EV_ABS', data => {\n        //     this.log.info('Absolute axis : ' + data.code + ' - ' + data.value);\n        // });\n        // this._reader.on('EV_REL', data => {\n        //     this.log.info('Relative axis : ' + data.code + ' - ' + data.value);\n        // });\n        // this._reader.on('error', err => {\n        //     this.log.info('reader error : ' + err);\n        // });\n        // platform-ir-receiver@7-event\n        // this._reader.search('/dev/input/by-path', this.config.devicePath, (err, devicePaths) => {\n        //     if(err) {\n        //         this.log.warn('No input device found for given config, run ls /dev/input/by-path/ to identify your device');\n        //         return;\n        //     }\n\n        //     this.log.info('Devices found: ' + JSON.stringify(devicePaths));\n        //     if(devicePaths.length > 1) {\n        //         this.log.warn('More than one possible input device found, please configure a more precise path');\n        //     }\n\n        //     const device = this._reader.open(devicePaths[0]);\n        //     device.on('open', () => {\n        //         this.log.info('Device successfully opened');\n        //     });\n        // });\n\n        /*\n        For every state in the system there has to be also an object of type state\n        Here a simple template for a boolean variable named \"testVariable\"\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n        */\n        // await this.setObjectNotExistsAsync('testVariable', {\n        //     type: 'state',\n        //     common: {\n        //         name: 'testVariable',\n        //         type: 'boolean',\n        //         role: 'indicator',\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        this.subscribeStates('*');\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n\n        /*\n            setState examples\n            you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n        */\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync('testVariable', true);\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync('testVariable', { val: true, ack: true });\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n        // examples for the checkPassword/checkGroup functions\n        let result = await this.checkPasswordAsync('admin', 'iobroker');\n        this.log.info('check user admin pw iobroker: ' + result);\n\n        result = await this.checkGroupAsync('admin', 'admin');\n        this.log.info('check group user admin group admin: ' + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.log.info('unloading...');\n            this._readerManager.destroy();\n        } catch (e) {\n            this.log.warn('error while unloading: ' + e);\n        } finally {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new IrRemoteInput(options);\n} else {\n    // otherwise start the instance directly\n    (() => new IrRemoteInput())();\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAIvB,oBAA6B;AAC7B,wBAAkC;AAElC,MAAM,sBAAsB,MAAM,QAAQ;AAAA,EAM/B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM,iCACC,UADD;AAAA,MAEF,MAAM;AAAA,IACV,EAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAE1C,SAAK,cAAc,IAAI,oCAAkB,IAAI;AAC7C,SAAK,iBAAiB,IAAI,2BAAa,MAAM,KAAK,WAAW;AAAA,EACjE;AAAA,QAKc,UAAyB;AAKnC,SAAK,IAAI,KAAK,6BAA6B,KAAK,OAAO,UAAU;AACjE,UAAM,KAAK,YAAY,KAAK;AAC5B,SAAK,eAAe,KAAK,KAAK,OAAO,UAAU;AAmD/C,SAAK,gBAAgB,GAAG;AAqBxB,QAAI,SAAS,MAAM,KAAK,mBAAmB,SAAS,UAAU;AAC9D,SAAK,IAAI,KAAK,mCAAmC,MAAM;AAEvD,aAAS,MAAM,KAAK,gBAAgB,SAAS,OAAO;AACpD,SAAK,IAAI,KAAK,yCAAyC,MAAM;AAAA,EACjE;AAAA,EAKQ,SAAS,UAA4B;AACzC,QAAI;AACA,WAAK,IAAI,KAAK,cAAc;AAC5B,WAAK,eAAe,QAAQ;AAAA,IAChC,SAAS,GAAP;AACE,WAAK,IAAI,KAAK,4BAA4B,CAAC;AAAA,IAC/C,UAAE;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAmBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,cAAc,OAAO;AACtG,OAAO;AAEH,EAAC,OAAM,IAAI,cAAc,GAAG;AAChC;",
  "names": []
}
